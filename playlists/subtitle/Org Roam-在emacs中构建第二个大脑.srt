1
00:00:05.569 --> 00:00:17.173
[音乐]

3
00:00:17.173 --> 00:00:18.187
大家好，欢迎来到系统

5
00:00:18.187 --> 00:00:20.202
工匠，我是大卫威尔逊，

7
00:00:20.202 --> 00:00:21.215
今天我们将讨论如何

9
00:00:21.215 --> 00:00:23.234
建立个人知识库，

11
00:00:23.234 --> 00:00:24.249
或者您可以将其视为 emacs 中的第二个

13
00:00:24.249 --> 00:00:25.254
大脑，

15
00:00:25.254 --> 00:00:28.285
使用名为 org roam 的软件包

17
00:00:28.285 --> 00:00:31.310
因此，在我们讨论 org roam 之前，我们

19
00:00:31.310 --> 00:00:31.319
应该先谈谈 org

21
00:00:32.319 --> 00:00:34.342
模式，众所周知，org 模式是一个很好的

23
00:00:34.342 --> 00:00:35.350
工具，

25
00:00:35.350 --> 00:00:36.366
不仅可以用于书写和记录个人

27
00:00:36.366 --> 00:00:38.387
笔记，还可以用于跟踪

29
00:00:38.387 --> 00:00:39.399
个人计划、

31
00:00:40.399 --> 00:00:42.420
待办事项列表等等，如果您 如果你

33
00:00:42.420 --> 00:00:43.439
曾经使用过 org 模式并真正了解

35
00:00:44.439 --> 00:00:45.449
它，那么你可能知道我在

37
00:00:45.449 --> 00:00:47.472
说什么，所以一旦你开始

39
00:00:47.472 --> 00:00:49.493
真正投入到 org 模式中，

41
00:00:49.493 --> 00:00:51.509
你最终将不得不想出一个

43
00:00:51.509 --> 00:00:52.526
管理你的 org 文件的系统，

45
00:00:52.526 --> 00:00:54.540
这样 它很容易存储

47
00:00:54.540 --> 00:00:56.563
和查找您需要的信息，

49
00:00:56.563 --> 00:00:57.571
因此 org

51
00:00:57.571 --> 00:00:59.590
rome 是 org 模式的扩展，它

53
00:00:59.590 --> 00:01:00.608
解决了

55
00:01:00.609 --> 00:01:02.622
我个人

57
00:01:02.622 --> 00:01:04.645
在使用 org 模式进行个人笔记时遇到的几个最大问题，

59
00:01:04.645 --> 00:01:06.668
这就是我需要多少 org 文件

61
00:01:06.668 --> 00:01:08.686
以及我如何决定在

63
00:01:08.686 --> 00:01:11.714
我创建的所有这些组织文件中放置东西的位置，

65
00:01:11.714 --> 00:01:13.735
以便 orgrome 通过

67
00:01:13.735 --> 00:01:15.750
轻松创建以

69
00:01:15.750 --> 00:01:17.774
主题为中心的组织文件并将它们链接

71
00:01:17.774 --> 00:01:18.781
在一起来解决这些问题，

73
00:01:18.781 --> 00:01:19.797
以便您可以将信息视为

75
00:01:19.797 --> 00:01:21.811
节点 一个网络而不是

77
00:01:21.811 --> 00:01:22.828
分层文档，

79
00:01:22.828 --> 00:01:25.851
所以每当你开始大量使用 org 模式

81
00:01:25.851 --> 00:01:26.865
并尝试

83
00:01:26.865 --> 00:01:28.886
在 org 模式下组织你的信息时，

85
00:01:28.886 --> 00:01:30.901
你最终会创建一堆 org

87
00:01:30.901 --> 00:01:32.919
文件，这些文件有很多标题

89
00:01:32.919 --> 00:01:33.936
甚至嵌套的子标题等等

91
00:01:33.936 --> 00:01:35.955
它有点像捕捉

93
00:01:35.955 --> 00:01:36.967
你试图

95
00:01:36.967 --> 00:01:37.978
记住的信息或者

97
00:01:37.978 --> 00:01:41.101
你试图计划的项目，

99
00:01:41.101 --> 00:01:43.102
随着时间的推移它变得笨拙而且很难

101
00:01:43.102 --> 00:01:44.104
决定如何拆分所有这些信息

103
00:01:44.104 --> 00:01:46.106
所以 orgrome 给了我们一些

105
00:01:46.106 --> 00:01:49.109
解决这个问题的策略和一些工具，

107
00:01:49.109 --> 00:01:50.110
因此您实际上可以将其视为

109
00:01:50.110 --> 00:01:52.112
个人 wiki 它的功能实际上

111
00:01:52.112 --> 00:01:53.113
很像 wiki

113
00:01:53.113 --> 00:01:54.114
但它确实有一些额外的

115
00:01:54.114 --> 00:01:57.116
功能，

117
00:01:57.116 --> 00:01:58.118
所以它的灵感来自一个名为

119
00:01:58.118 --> 00:02:00.120
rome 的程序和一个笔记策略 称为

121
00:02:00.120 --> 00:02:01.121
zettle cayston 的

123
00:02:02.121 --> 00:02:03.123
目标是创建许多

125
00:02:03.123 --> 00:02:05.125
单独的单一主题笔记，

127
00:02:05.125 --> 00:02:07.127
这些笔记链接在一起以创建

129
00:02:07.127 --> 00:02:09.129
网络知识库，

131
00:02:09.129 --> 00:02:12.132
嗯，如果你之前听说过 zettle cayston 这个词，

133
00:02:12.132 --> 00:02:14.134
也许你已经稍微研究了一下

135
00:02:14.134 --> 00:02:15.135
也许你 难道你真的

137
00:02:15.135 --> 00:02:17.137
不需要理解这意味着什么或

139
00:02:17.137 --> 00:02:19.139
真正研究它，然后才能以

141
00:02:19.139 --> 00:02:21.141
一种富有成效和有用的方式实际使用 orgrome

143
00:02:21.141 --> 00:02:23.143
我真的没有太多研究 zettle 酪蛋白，

145
00:02:23.143 --> 00:02:25.145
但我理解

147
00:02:25.145 --> 00:02:27.147
你为什么想要的核心概念 像那样做，我

149
00:02:27.147 --> 00:02:29.149
已经能够用 orgrom 做的很好，

151
00:02:29.149 --> 00:02:32.151
使我自己的个人知识库

153
00:02:32.151 --> 00:02:33.152
很好，所以

155
00:02:33.152 --> 00:02:34.154
很多人认为这就像创造

157
00:02:34.154 --> 00:02:37.156
第二个大脑，因为它可以轻松

159
00:02:37.156 --> 00:02:39.158
处理大量知识

161
00:02:39.158 --> 00:02:41.161
并提醒你 这些主题之间的联系

163
00:02:41.161 --> 00:02:43.163
非常有效，一旦你开始

165
00:02:44.163 --> 00:02:45.165
建立你的个人知识库，

167
00:02:45.165 --> 00:02:47.166
你会随着时间的推移看到它

169
00:02:47.166 --> 00:02:48.168
实际上是如何发挥

171
00:02:48.168 --> 00:02:50.170
orgrom ov 相对于

173
00:02:50.170 --> 00:02:52.172
其他类似笔记工具的主要优势是

175
00:02:52.172 --> 00:02:53.173
你可以使用所有的

177
00:02:54.173 --> 00:02:56.176
org 模式的其他强大功能以及这种

179
00:02:56.176 --> 00:02:57.177
组织

181
00:02:57.177 --> 00:03:00.180
org 文件和信息的新方式所以

183
00:03:00.180 --> 00:03:01.181
我们将

185
00:03:01.181 --> 00:03:03.183
在有关 orgrome 的系列中制作更多视频，

187
00:03:03.183 --> 00:03:04.184
我们将在其中讨论如何将

189
00:03:04.184 --> 00:03:06.186
所有其他 org 模式功能引入

191
00:03:06.186 --> 00:03:08.187
工作流程

193
00:03:08.187 --> 00:03:09.189
使用 org roam 但现在我们只

195
00:03:10.189 --> 00:03:11.191
讨论如何设置

197
00:03:11.191 --> 00:03:13.193
orgrome 以及如何使用它的基础知识

199
00:03:13.193 --> 00:03:15.195
以及如何考虑

201
00:03:15.195 --> 00:03:17.197
使用 orgrom 的模型

203
00:03:17.197 --> 00:03:20.200
好吧所以嗯如果你没有

205
00:03:20.200 --> 00:03:23.203
关注或新郎 到目前为止，嗯，

207
00:03:23.203 --> 00:03:25.204
我会告诉你，呃，有

209
00:03:25.204 --> 00:03:26.206
一个以前版本的 orgrom

211
00:03:26.206 --> 00:03:28.208
，人们已经使用了一两年，

213
00:03:28.208 --> 00:03:30.210
然后呃，最近在

215
00:03:30.210 --> 00:03:32.212
录制这个视频的最后几周内，

217
00:03:32.212 --> 00:03:37.216
一个版本 两个出来了，

219
00:03:37.216 --> 00:03:48.228
据我所知，v2 的先决条件现在与 v1 中的不同

221
00:03:48.228 --> 00:03:50.230
对于那个

223
00:03:50.230 --> 00:03:52.232
程序，只要你

225
00:03:52.232 --> 00:03:54.234
安装了兼容的编译器，

227
00:03:54.234 --> 00:03:56.236
所以在 linux 和 mac os 上，你只需要

229
00:03:56.236 --> 00:03:57.237
确保你有一个 c

231
00:03:57.237 --> 00:04:01.241
plus plus 编译器，比如 gcc 或 clang

233
00:04:01.241 --> 00:04:03.242
，你通常可以从

235
00:04:03.242 --> 00:04:05.245
你的 linux 发行版的包管理器安装它

237
00:04:05.245 --> 00:04:12.252
或在 Windows 上的 Mac OS 上使用自制软件或其他工具，

239
00:04:12.252 --> 00:04:13.253
如果您点击展示说明中的链接，您将需要按照 orgro 手册中的说明进行操作，

241
00:04:14.253 --> 00:04:15.255
或者抱歉，在

243
00:04:15.255 --> 00:04:16.256
下面的展示说明说明中您可以

245
00:04:16.256 --> 00:04:18.258
找到一个链接 在那里，但基本上的想法

247
00:04:18.258 --> 00:04:21.260
是，你需要

249
00:04:21.260 --> 00:04:23.263
在 Windows 上安装 msys2 工具，然后

251
00:04:23.263 --> 00:04:24.264
通过它安装 gcc，然后

253
00:04:24.264 --> 00:04:25.265
orgrim 应该能够编译这个

255
00:04:26.265 --> 00:04:28.267
程序，你可能想知道为什么

257
00:04:28.267 --> 00:04:30.269
orgrome 需要一个数据库，

259
00:04:30.269 --> 00:04:32.271
数据库使 orgrom 能够

261
00:04:32.271 --> 00:04:34.273
跟踪 您创建的所有节点

263
00:04:34.273 --> 00:04:35.274
以及

265
00:04:35.274 --> 00:04:38.277
这些节点之间的链接非常有效，因此

267
00:04:38.277 --> 00:04:39.279
它比

269
00:04:39.279 --> 00:04:41.281
您的 emacs 列表代码更好，如果您在本地使用实际数据库，emacs 必须

271
00:04:41.281 --> 00:04:43.283
解析所有这些东西并将它们以

273
00:04:43.283 --> 00:04:46.286
某种方式存储在 e-max 列表文件中

275
00:04:46.286 --> 00:04:49.288
然后它使所有这一切变得

277
00:04:49.288 --> 00:04:50.290
更有效率，

279
00:04:50.290 --> 00:04:52.292
呃，好处是你

281
00:04:52.292 --> 00:04:54.294
实际上可以访问该数据库以及

283
00:04:54.294 --> 00:04:57.297
在 orgrom 之上编写扩展，这

285
00:04:57.297 --> 00:04:59.298
可能是一件非常有趣的事情

287
00:04:59.298 --> 00:05:00.300
，我们将讨论这个 在稍后的

289
00:05:00.300 --> 00:05:01.301
视频中，现在不会真正进入，

291
00:05:01.301 --> 00:05:03.302
但这是你

293
00:05:03.302 --> 00:05:04.304
应该记住的，以防你

295
00:05:04.304 --> 00:05:08.308
需要对

297
00:05:08.308 --> 00:05:11.311
你的 org 文件进行更高级的搜索好吧，所以要

299
00:05:11.311 --> 00:05:12.312
安装 org roam，

301
00:05:12.312 --> 00:05:14.313
你基本上只需从 melba 安装它

303
00:05:14.313 --> 00:05:16.316
使用 package.el straight.el 或

305
00:05:16.316 --> 00:05:17.317
任何用于

307
00:05:17.317 --> 00:05:20.320
在 emacs 配置中安装包的东西，

309
00:05:20.320 --> 00:05:23.322
如果你将 package 与 package.el 一起使用，

311
00:05:23.322 --> 00:05:24.323
你只需

313
00:05:24.323 --> 00:05:26.326
在此处复制这个简短的小调用

315
00:05:26.326 --> 00:05:29.328
即可首次安装和加载 orgroom

317
00:05:29.328 --> 00:05:30.329
这是 不是我们要

319
00:05:30.329 --> 00:05:31.331
配置它的方式，而是我们将使用

321
00:05:31.331 --> 00:05:32.332
它来实际执行

323
00:05:32.332 --> 00:05:34.334
初始安装过程并

325
00:05:34.334 --> 00:05:36.336
调用我们需要安装的那个 emac

327
00:05:36.336 --> 00:05:38.337
sequel light uh

329
00:05:38.337 --> 00:05:40.339
组件的编译，

331
00:05:40.339 --> 00:05:41.341
所以我 将在这里弹出一个

333
00:05:41.341 --> 00:05:43.343
单独的 emax 配置

335
00:05:43.343 --> 00:05:45.345
然后我将运行这个配置

337
00:05:45.345 --> 00:05:46.346
呃

339
00:05:46.346 --> 00:05:48.348
安装 orgrome 然后

341
00:05:48.348 --> 00:05:50.349
编译其他包

343
00:05:50.349 --> 00:05:52.351
所以我现在已经安装了 orgrom

345
00:05:52.351 --> 00:05:53.353
但你可以

347
00:05:53.353 --> 00:05:55.355
在 echo 区域看到它 是说它

349
00:05:55.355 --> 00:05:56.356
正在编译 emac

351
00:05:56.356 --> 00:05:59.359
sql sqlite 二进制文件，这可能需要

353
00:05:59.359 --> 00:06:01.360
五到十秒，具体

355
00:06:01.360 --> 00:06:02.362
取决于您的计算机的速度，

357
00:06:02.362 --> 00:06:05.364
但是一旦完成 orgrome 应该

359
00:06:05.364 --> 00:06:06.365
能够加载

361
00:06:06.365 --> 00:06:07.367
并且您将能够检查

363
00:06:07.367 --> 00:06:10.370
sqlite 是否

365
00:06:10.370 --> 00:06:11.371
通过检查

367
00:06:11.371 --> 00:06:14.373
特定变量可以使用二进制文件，我们

369
00:06:14.373 --> 00:06:15.375
稍等片刻，我们可以，嗯，

371
00:06:15.375 --> 00:06:18.378
我们可以尝试一下，嗯，所以

373
00:06:18.378 --> 00:06:20.380
我说的变量是 orgrome

375
00:06:20.380 --> 00:06:23.382
sqlite 可用的 p 变量，它

377
00:06:23.382 --> 00:06:24.384
基本上是一个内部变量 orgrom 的变量

379
00:06:24.384 --> 00:06:26.386
说好的，我们实际上发现

381
00:06:26.386 --> 00:06:29.388
sqlite 组件可用，我们可以

383
00:06:29.388 --> 00:06:30.390
继续，

385
00:06:30.390 --> 00:06:32.391
所以这里会弹出一个小窗口，我

387
00:06:32.391 --> 00:06:34.393
稍后会讨论这个，但在

389
00:06:34.393 --> 00:06:35.395
那之前我只是要检查这个或

391
00:06:35.395 --> 00:06:36.396
chrome

393
00:06:36.396 --> 00:06:39.399
sqlite 可用的 p 变量，我们可以

395
00:06:39.399 --> 00:06:41.400
看到该值为 t 所以它似乎已

397
00:06:41.400 --> 00:06:43.402
成功编译并且

399
00:06:43.402 --> 00:06:45.405
可供 orgrome 使用

401
00:06:46.405 --> 00:06:49.408
所以现在一旦我们第一次加载 orgrim

403
00:06:49.408 --> 00:06:50.409
我们就会弹出这个窗口

405
00:06:50.409 --> 00:06:52.411
它是 警告缓冲区，

407
00:06:52.411 --> 00:06:53.413
它给我们信息说

409
00:06:53.413 --> 00:06:57.417
我们现在在 orgrome v2 上，所以由于

411
00:06:57.417 --> 00:07:02.421
orgrim v1 和 v2 之间只是一个过渡，所以

413
00:07:02.421 --> 00:07:04.423
orgrome 的整体框架以及

415
00:07:04.423 --> 00:07:06.425
它存储的数据库发生了一些变化，

417
00:07:06.425 --> 00:07:09.429
如果 在

419
00:07:10.429 --> 00:07:12.432
必须运行

421
00:07:12.432 --> 00:07:14.433
此处说明中的命令将所有

423
00:07:14.433 --> 00:07:15.435
orgrom 文件更新为 v2 之前，您一直在

425
00:07:16.435 --> 00:07:18.437
使用 orgrom v1，但是如果您之前从未使用过 orgrom，则

427
00:07:18.437 --> 00:07:19.438
不必担心

429
00:07:19.438 --> 00:07:20.440
这个原因 这样做

431
00:07:20.440 --> 00:07:21.440
是因为

433
00:07:21.440 --> 00:07:23.443
很多人会受到

435
00:07:23.443 --> 00:07:25.444
这次升级的影响，他们想

437
00:07:25.444 --> 00:07:26.446
确保每个人都知道

439
00:07:26.446 --> 00:07:29.448
如果他们必须升级该怎么做，但如果这是

441
00:07:29.448 --> 00:07:29.449
你第一次升级，

443
00:07:30.449 --> 00:07:36.455
你不必担心 所以，

445
00:07:36.455 --> 00:07:38.458
如果您之前从未使用过 orgrom v1，

447
00:07:38.458 --> 00:07:39.459
或者如果您

449
00:07:39.459 --> 00:07:41.461
使用过 orgromv1 并且按照

451
00:07:41.461 --> 00:07:43.463
说明进行升级，那么您需要做的事情

453
00:07:43.463 --> 00:07:45.465
就是让这条消息消失，那就是设置一个特定的变量来让它

455
00:07:45.465 --> 00:07:48.468
消失，并且 呃，让我们看看我是否在此处设置了

457
00:07:48.468 --> 00:07:49.469
它，我想我一定在稍后的幻灯片中说过了，

459
00:07:49.469 --> 00:07:52.471
嗯​​，但我们将

461
00:07:52.471 --> 00:07:52.472
在一分钟内讨论它，

463
00:07:52.472 --> 00:07:54.474
以便您可以看到如何使该

465
00:07:54.474 --> 00:07:56.475
消息最终消失，

467
00:07:56.475 --> 00:07:58.478
所以在我们终于 安装了 orgrome

469
00:07:58.478 --> 00:08:00.480
嗯，最重要的

471
00:08:00.480 --> 00:08:05.485
配置是你的 orgrom 文件所在的文件夹，

473
00:08:05.485 --> 00:08:07.487
所以默认情况下，这将是

475
00:08:07.487 --> 00:08:09.488
你的主目录中名为 org roam 的文件夹，

477
00:08:09.488 --> 00:08:10.490
但你可能希望将

479
00:08:10.490 --> 00:08:12.491
其设置为其他内容

481
00:08:12.491 --> 00:08:14.494
和 不管你使用什么路径，呃，

483
00:08:14.494 --> 00:08:20.499
我绝对建议你在你

485
00:08:20.499 --> 00:08:21.501
告诉 orgrim 使用它之前提前创建那个文件夹，因为

487
00:08:21.501 --> 00:08:23.502
你在 orgrome 中创建的第一个音符

489
00:08:23.502 --> 00:08:25.505
实际上可能没有正确创建，

491
00:08:25.505 --> 00:08:27.506
所以最好仔细检查

493
00:08:27.506 --> 00:08:29.508
一下 文件夹在你

495
00:08:29.508 --> 00:08:32.512
开始使用它之前就已经存在，所以

497
00:08:32.512 --> 00:08:35.515
哦，还有一个重要的提示，

499
00:08:36.515 --> 00:08:38.517
如果你有

501
00:08:38.517 --> 00:08:39.519
一个像你已经使用 org 模式

503
00:08:39.519 --> 00:08:40.519
很

505
00:08:40.519 --> 00:08:41.521
长时间并且文件夹已满的文件夹，那么不要使用你现有的充满 org 文件的文件夹 org

507
00:08:41.521 --> 00:08:45.524
模式文件不要将其用作 orgrome 的文件夹，

509
00:08:45.524 --> 00:08:46.526
因为这些文件

511
00:08:46.526 --> 00:08:48.527
内部没有必要的元数据，

513
00:08:48.527 --> 00:08:49.529
org rom 将无法

515
00:08:50.529 --> 00:08:51.530
正确处理它们，因此最好创建

517
00:08:51.530 --> 00:08:52.532
一个新文件夹，

519
00:08:52.532 --> 00:08:54.533
然后如果你 想要迁移

521
00:08:54.533 --> 00:08:55.534
旧组织笔记中的一些内容，

523
00:08:55.534 --> 00:08:56.536
您应该

525
00:08:56.536 --> 00:08:59.538
在组织漫游中创建新节点并将该

527
00:08:59.538 --> 00:09:01.540
信息复制过来，这只是一种

529
00:09:01.540 --> 00:09:03.542
最佳实践，

531
00:09:03.542 --> 00:09:05.544
因此我们还将设置一些

533
00:09:05.544 --> 00:09:06.546
真正必要的键绑定 为了

535
00:09:06.546 --> 00:09:08.547
有效地使用它然后

537
00:09:08.547 --> 00:09:10.549
我们将调用 orgrim setup 以确保

539
00:09:10.549 --> 00:09:11.550
一切准备就绪它基本上

541
00:09:11.550 --> 00:09:12.552
只是设置一些挂钩并确保

543
00:09:12.552 --> 00:09:14.553
数据库可以在

545
00:09:14.553 --> 00:09:16.555
我们编辑其中一个 orgrome

547
00:09:16.555 --> 00:09:20.559
节点文件时更新所以这是更有

549
00:09:20.559 --> 00:09:22.561
用的 orgrim 的配置在这里，

551
00:09:22.561 --> 00:09:23.562
我们将把它复制过来，我会

553
00:09:23.562 --> 00:09:25.564
告诉你这些东西是做什么的，

555
00:09:25.564 --> 00:09:29.568
呃，让我把它放进去，所以现在

557
00:09:29.568 --> 00:09:31.570
我们正在设置 orgrome 目录，我将

559
00:09:31.570 --> 00:09:32.571
它设置到一个

561
00:09:32.571 --> 00:09:34.573
名为 rome notes 的文件夹中 我的主

563
00:09:34.573 --> 00:09:37.576
文件夹，但是

565
00:09:37.576 --> 00:09:39.578
你应该将它设置为任何你觉得

567
00:09:39.578 --> 00:09:40.579
最舒服的地方，无论你

569
00:09:40.579 --> 00:09:41.581
想把你的笔记放在哪里，

571
00:09:41.581 --> 00:09:45.584
所以这只是我们为了这个视频而使用的一个例子，

573
00:09:45.584 --> 00:09:46.585
我们还设置了三个绑定

575
00:09:46.585 --> 00:09:47.587
，我们将 一会儿再谈，

577
00:09:47.587 --> 00:09:49.588
我们也有这个 orgrim 设置，

579
00:09:49.588 --> 00:09:51.590
我之前提到过，

581
00:09:51.590 --> 00:09:52.592
所以就像我说的，我们需要确保

583
00:09:52.592 --> 00:09:55.595
这个 ro 这个 roam notes 目录在

585
00:09:55.595 --> 00:09:57.596
我们继续之前存在，所以我要跳进

587
00:09:57.596 --> 00:09:59.598
e-shell 真的很快并尝试

589
00:09:59.598 --> 00:10:02.601
创建该目录呃所以房间笔记没问题

591
00:10:02.601 --> 00:10:04.604
所以我认为那个应该是空的是的

593
00:10:04.604 --> 00:10:06.605
那里已经没有任何东西

595
00:10:06.605 --> 00:10:08.608
所以现在我将回到 init.el 我

597
00:10:08.608 --> 00:10:10.610
将使用

599
00:10:10.610 --> 00:10:12.611
control x control e 执行此配置

601
00:10:12.611 --> 00:10:14.613
现在 我们应该正确设置所有内容，

603
00:10:14.613 --> 00:10:15.615
以便 uh

605
00:10:15.615 --> 00:10:18.618
org 将使用 uh 的 roam notes 文件夹

607
00:10:18.618 --> 00:10:22.621
来存储我们的新笔记所以

609
00:10:22.621 --> 00:10:25.624
嗯现在嗯哦好的所以显然

611
00:10:25.624 --> 00:10:27.626
迁移警告部分在这里所以

613
00:10:27.626 --> 00:10:29.628
正如我之前提到的迁移

615
00:10:29.628 --> 00:10:32.631
警告对话框将始终弹出 直到

617
00:10:32.631 --> 00:10:34.633
你设置一个特定的变量来

619
00:10:34.633 --> 00:10:36.636
抑制它所以在这个配置中我们

621
00:10:36.636 --> 00:10:37.636
刚刚复制

623
00:10:37.636 --> 00:10:40.640
我们需要为 orgrome v2 ack 设置这个 uh 变量

625
00:10:40.640 --> 00:10:44.643
并将其设置为 true

627
00:10:44.643 --> 00:10:45.645
但我们需要在 use package 的 init 部分中进行

629
00:10:45.645 --> 00:10:47.647
它之前

631
00:10:48.647 --> 00:10:50.649
orgrim 包被加载，因为

633
00:10:50.649 --> 00:10:51.650
这里发生的事情是当

635
00:10:51.650 --> 00:10:52.652
orgrim 被加载时，

637
00:10:52.652 --> 00:10:54.654
如果该变量未设置，它会

639
00:10:54.654 --> 00:10:56.656
很好地显示警告消息，因此

641
00:10:56.656 --> 00:10:58.657
为了防止这种情况发生，我们需要

643
00:10:58.657 --> 00:10:59.659
确保将这两行复制

645
00:10:59.659 --> 00:11:01.660
到我们的配置中，

647
00:11:01.660 --> 00:11:03.662
以便 我们以后不会再看到这些，

649
00:11:03.662 --> 00:11:04.664
所以

651
00:11:04.664 --> 00:11:06.665
基本上，如果我现在重新启动 emacs，

653
00:11:06.665 --> 00:11:08.667
然后

655
00:11:08.667 --> 00:11:09.668
再次加载此配置，我们就不会再看到

657
00:11:09.668 --> 00:11:11.671
该警告了，

659
00:11:12.671 --> 00:11:13.672
所以现在

661
00:11:13.672 --> 00:11:14.673
我们已经设置好了一切

663
00:11:14.673 --> 00:11:16.676
正确安装了 orgrome 我们已经有了基本的

665
00:11:16.676 --> 00:11:17.677
配置集

667
00:11:17.677 --> 00:11:21.680
现在我们终于可以在 orgrom 中创建我们的第一个节点

669
00:11:21.680 --> 00:11:23.682
所以我们可以使用我们

671
00:11:23.682 --> 00:11:25.684
刚刚配置的 f 绑定中的控制 c

673
00:11:25.684 --> 00:11:27.686
来调用 orgrome

675
00:11:27.686 --> 00:11:29.689
node find 命令，它会出现 一个

677
00:11:29.689 --> 00:11:31.690
完成部分

679
00:11:31.690 --> 00:11:34.693
会话来选择或创建一个节点，

681
00:11:34.693 --> 00:11:36.695
呃，因为我们想要创建一个节点，我们

683
00:11:36.695 --> 00:11:38.698
必须输入一个尚不存在的节点的名称，

685
00:11:38.698 --> 00:11:40.699
假设我们想要创建一个

687
00:11:40.699 --> 00:11:41.701
名为编程语言的节点，所以我' 我会

689
00:11:42.701 --> 00:11:43.702
跳到这个配置

691
00:11:43.702 --> 00:11:46.705
控制 c n f，你可以在这里看到

693
00:11:46.705 --> 00:11:48.707
密钥转换告诉我们我把那个

695
00:11:48.707 --> 00:11:49.709
密钥绑定

697
00:11:49.709 --> 00:11:51.710
在迷你缓冲区中要求我们提供一个

699
00:11:51.710 --> 00:11:53.712
节点名称我们没有看到任何其他节点，

701
00:11:53.712 --> 00:11:55.714
因为我们没有' 我还没有创建任何东西，所以

703
00:11:55.714 --> 00:11:56.716
我要在这里输入编程

705
00:11:56.716 --> 00:12:00.719
语言，然后按回车键，现在

707
00:12:00.719 --> 00:12:01.720
我们看到一个弹出窗口，

709
00:12:01.720 --> 00:12:03.722
但它不仅仅是一个普通文件，它

711
00:12:03.722 --> 00:12:06.725
实际上是一个 org 模式捕获缓冲区，

713
00:12:06.725 --> 00:12:08.727
所以发生这种情况的原因是因为

715
00:12:08.727 --> 00:12:09.728
org roam

717
00:12:09.728 --> 00:12:13.732
使用 um 或捕获模板作为

719
00:12:13.732 --> 00:12:16.735
为新节点提供默认模板的一种方式，

721
00:12:16.735 --> 00:12:18.737
但

723
00:12:18.737 --> 00:12:20.739
如果您有不同

725
00:12:20.739 --> 00:12:21.741
类型的节点要

727
00:12:21.741 --> 00:12:23.742
为您的工作流创建，您也可以添加额外的捕获模板，

729
00:12:23.742 --> 00:12:26.745
因此默认情况下它只是一个普通的 org 文件

731
00:12:26.745 --> 00:12:27.747
在顶部有一些元数据，

733
00:12:27.747 --> 00:12:29.749
这是 orgrome 所必需的，还有

735
00:12:29.749 --> 00:12:31.750
我们刚刚创建的节点的标题，

737
00:12:31.750 --> 00:12:32.751
然后其他所有内容都

739
00:12:32.751 --> 00:12:36.755
对我们开放，可以将我们想要的任何信息放入其中，

741
00:12:36.755 --> 00:12:38.758
但在这个节点真正完全

743
00:12:38.758 --> 00:12:40.759
存在之前我们 必须按标题行中提到的 control c

745
00:12:40.759 --> 00:12:42.761
control c

747
00:12:42.761 --> 00:12:44.763
以便

749
00:12:44.763 --> 00:12:45.764
您可以在此处看到文件的捕获缓冲区

751
00:12:45.764 --> 00:12:47.766
在前面有捕获破折号

753
00:12:47.766 --> 00:12:49.768
我们要确保它在实际存储

755
00:12:49.768 --> 00:12:51.770
之前作为真实文件

757
00:12:51.770 --> 00:12:53.773
存储 进入 orgrome

759
00:12:54.773 --> 00:12:54.774
数据库，

761
00:12:54.774 --> 00:12:55.775
所以我只想在这里添加一小行

763
00:12:55.775 --> 00:12:58.777
文本我会说这里有一些

765
00:12:58.777 --> 00:13:01.781
很棒的编程语言，我将使用

767
00:13:01.781 --> 00:13:03.782
ctrl c ctrl c

769
00:13:03.782 --> 00:13:05.785
来完成这个节点，现在我们看到

771
00:13:05.785 --> 00:13:07.786
捕获在 文件名的开头

773
00:13:07.786 --> 00:13:09.788
现在已经消失了，因为这个文件

775
00:13:09.788 --> 00:13:10.789
现在已经保存了，

777
00:13:10.789 --> 00:13:12.791
我们有了

779
00:13:12.791 --> 00:13:13.792
在那里创建的文件内容，

781
00:13:13.792 --> 00:13:15.794
嗯，我们准备好了，

783
00:13:15.794 --> 00:13:17.796
如果我再次按下 ctrl c 和 f，我们现在有了第一个节点

785
00:13:17.796 --> 00:13:20.799
你可以看到我们有我们的

787
00:13:20.799 --> 00:13:22.801
单一节点编程语言，它

789
00:13:22.801 --> 00:13:24.803
现在显示在这里，

791
00:13:24.803 --> 00:13:25.804
我们

793
00:13:25.804 --> 00:13:29.808
在 orgrome 中创建的任何更多节点将显示为此列表中的节点，

795
00:13:29.808 --> 00:13:30.809
如果你有一个好的完成

797
00:13:30.809 --> 00:13:32.811
框架，比如 helm

799
00:13:32.811 --> 00:13:35.814
iv selectrum vertico 等等以及

801
00:13:35.814 --> 00:13:37.817
emacs 中的任何内置节点，我想呃，

803
00:13:37.817 --> 00:13:39.818
你会很容易找到

805
00:13:39.818 --> 00:13:41.820
你正在寻找的节点，所以

807
00:13:41.820 --> 00:13:44.823
与

809
00:13:44.823 --> 00:13:45.824
你之前可能一直在做的相比，这是 orgrome 变得有用的地方

811
00:13:45.824 --> 00:13:47.826
不必弄清楚

813
00:13:47.826 --> 00:13:48.827
您要查找的文件您不必

815
00:13:48.827 --> 00:13:50.829
使用查找文件就可以导航

817
00:13:50.829 --> 00:13:52.831
您的文件层次结构以查找

819
00:13:52.831 --> 00:13:53.832
您只需按此

821
00:13:53.832 --> 00:13:57.836
ctrl c 和 f um 键绑定然后您

823
00:13:57.836 --> 00:13:58.837
只需键入 在

825
00:13:58.837 --> 00:13:59.838
您要查找的主题或节点的名称中，然后

827
00:13:59.839 --> 00:14:00.839
按回车键，

829
00:14:00.839 --> 00:14:03.842
然后您就进入了文件，这样

831
00:14:03.842 --> 00:14:05.845
从这个角度来看，事情会变得更加高效好吧，

833
00:14:05.845 --> 00:14:08.848
让我们看看这里还有什么，

835
00:14:08.848 --> 00:14:09.848
现在

837
00:14:09.848 --> 00:14:12.851
让我们创建另一个 名为 emax

839
00:14:12.851 --> 00:14:15.854
list 的节点，因为我们想开始建立

841
00:14:15.854 --> 00:14:17.856
关于编程语言的个人知识库，所以我将使用

843
00:14:17.856 --> 00:14:19.858
相同的绑定控件 cnf

845
00:14:19.858 --> 00:14:22.861
我将输入 emacs lisp 按回车键它会

847
00:14:22.861 --> 00:14:23.863
拉出捕获缓冲区，

849
00:14:23.863 --> 00:14:25.864
因为我不需要

851
00:14:25.864 --> 00:14:26.865
现在向此添加任何其他信息我只是

853
00:14:26.865 --> 00:14:28.867
要按 ctrl c ctrl c

855
00:14:28.867 --> 00:14:30.869
现在如果我再次

857
00:14:30.869 --> 00:14:31.870
按 ctrl c

859
00:14:31.870 --> 00:14:33.872
和 f 已经创建了节点我们可以看到现在我们有

861
00:14:33.872 --> 00:14:34.873
编程语言和

863
00:14:34.873 --> 00:14:36.875
emacs lisp 作为两个节点 在

865
00:14:36.875 --> 00:14:40.879
我们的 orgrome 数据库中，

867
00:14:40.879 --> 00:14:42.881
所以这里有一个有趣的事情要注意，

869
00:14:42.881 --> 00:14:43.882
我不知道你是否注意到了，

871
00:14:43.882 --> 00:14:45.884
但这些只是普通的 org 文件，

873
00:14:45.884 --> 00:14:46.885
它们没有什么特别的，

875
00:14:46.885 --> 00:14:48.887
它们上面有一些额外的元数据，

877
00:14:48.887 --> 00:14:49.888
你可以 看到顶部有这个属性

879
00:14:49.888 --> 00:14:50.889
部分，

881
00:14:50.889 --> 00:14:52.891
但除此之外，它们是普通的组织

883
00:14:52.891 --> 00:14:54.893
模式文件，这意味着您可以将

885
00:14:54.893 --> 00:14:56.895
它们检入 git 存储库，您可以

887
00:14:56.895 --> 00:14:57.896
使用

889
00:14:57.896 --> 00:14:59.898
您喜欢的任何工具同步它们，例如 sync

891
00:14:59.898 --> 00:15:00.899
thing 或 unison 或 无论你喜欢什么

893
00:15:00.899 --> 00:15:02.901
rsync，

895
00:15:02.901 --> 00:15:05.904
所以你可以只同步那些纯文本

897
00:15:05.904 --> 00:15:06.905
文件，重要的是

899
00:15:06.905 --> 00:15:07.907
你实际上不必同步

901
00:15:08.907 --> 00:15:10.910
organ rom 自己的数据库任何

903
00:15:10.910 --> 00:15:12.911
你使用 orgrome 提取这些文件的机器，

905
00:15:12.911 --> 00:15:15.914
它将

907
00:15:15.914 --> 00:15:16.915
使用确切的重建数据库 您

909
00:15:16.915 --> 00:15:18.917
文件夹中已有的文件，

911
00:15:18.917 --> 00:15:20.919
这样数据库文件就不需要

913
00:15:20.919 --> 00:15:22.921
同步这实际上是非常有用的事情，

915
00:15:22.921 --> 00:15:23.922
因为现在您可以

917
00:15:23.922 --> 00:15:25.924
像对待普通文本文件一样对待这些文件，没有什么

919
00:15:25.924 --> 00:15:26.925
特别的

921
00:15:26.925 --> 00:15:27.926
，然后一切都可以在

923
00:15:27.926 --> 00:15:29.928
多台机器上工作，

925
00:15:29.928 --> 00:15:31.931
所以真正的力量 orgrim

927
00:15:32.931 --> 00:15:34.933
在您开始将您的节点文件链接在一起时开始，

929
00:15:34.933 --> 00:15:36.935
但这与

931
00:15:36.935 --> 00:15:37.936
您通常将

933
00:15:37.936 --> 00:15:40.939
org 文件链接在一起或在工作文件中添加链接的方式有点不同，

935
00:15:40.939 --> 00:15:42.941
您通常会使用让我们

937
00:15:42.941 --> 00:15:45.944
看看 ctrl c ctrl l 我相信

939
00:15:45.944 --> 00:15:48.947
这是关键绑定 是

941
00:15:48.947 --> 00:15:50.949
org insert link 命令，您不将

943
00:15:50.949 --> 00:15:52.951
其用于 org roam 您可以使用 org insert

945
00:15:52.951 --> 00:15:53.952
link 插入指向

947
00:15:53.952 --> 00:15:55.954
网站的链接和其他类似的东西，但是

949
00:15:55.954 --> 00:15:57.956
如果您想在

951
00:15:57.956 --> 00:15:59.958
org roam 节点之间建立链接，则有不同的

953
00:15:59.958 --> 00:16:03.962
绑定和命令 那就是用于

955
00:16:03.962 --> 00:16:05.964
插入的控件 cni 绑定，命令是

957
00:16:05.964 --> 00:16:06.965
orgrome

959
00:16:06.965 --> 00:16:08.967
node insert，这将显示

961
00:16:08.967 --> 00:16:10.969
一个完成列表列表，其中包含

963
00:16:10.969 --> 00:16:12.971
您到目前为止创建的所有节点，

965
00:16:12.971 --> 00:16:13.972
如果您选择其中一个

967
00:16:13.972 --> 00:16:17.976
节点，它将 要在当前缓冲区内创建一个链接，即

969
00:16:17.976 --> 00:16:21.980
另一个节点的当前或 chrome 节点缓冲区，

971
00:16:21.980 --> 00:16:23.982
所以如果我们进入编程

973
00:16:23.982 --> 00:16:24.983
语言文件

975
00:16:24.983 --> 00:16:28.987
，然后在 i 中使用 control c，

977
00:16:28.987 --> 00:16:31.990
我们将在此处获取我们的节点列表

979
00:16:31.990 --> 00:16:34.993
迷你缓冲区如果我选择 emax lisp

981
00:16:34.993 --> 00:16:35.995
然后我们有一个指向 emacs list

983
00:16:36.995 --> 00:16:37.996
peer 的链接我想如果我点击它

985
00:16:37.996 --> 00:16:39.998
它将导航到 emacs 列表文件

987
00:16:39.998 --> 00:16:41.100
我可以跳回到另一个文件

989
00:16:41.100 --> 00:16:43.100
如果你看一下 这里的实际

991
00:16:43.100 --> 00:16:43.100
链接

993
00:16:43.100 --> 00:16:45.100
实际上是一个基于 id 的链接，所以

995
00:16:45.100 --> 00:16:47.100
这是

997
00:16:47.100 --> 00:16:49.100
orgrome 的这些功能之一，可能与

999
00:16:49.100 --> 00:16:50.100
您

1001
00:16:50.100 --> 00:16:51.101
习惯的

1003
00:16:51.101 --> 00:16:53.101
所有链接都基于 org id 而

1005
00:16:53.101 --> 00:16:54.101
不是文件路径有点不同

1007
00:16:54.101 --> 00:16:56.101
所以保持 记住，无论何时你

1009
00:16:56.101 --> 00:16:58.101
都想使用它，

1011
00:16:58.101 --> 00:17:00.101
所以现在我们有两个节点，

1013
00:17:00.101 --> 00:17:01.102
它们链接在一起，这是一个好的

1015
00:17:01.102 --> 00:17:03.102
开始，

1017
00:17:03.102 --> 00:17:06.102
所以我们也可以输入一个节点的名称，

1019
00:17:06.102 --> 00:17:07.102
当我们 尝试

1021
00:17:08.102 --> 00:17:10.102
插入一个节点，该节点将被

1023
00:17:10.102 --> 00:17:13.103
创建，这是一个非常

1025
00:17:13.103 --> 00:17:15.103
有效的方法来开始构建你的

1027
00:17:15.103 --> 00:17:17.103
知识图，因为你正在写

1029
00:17:17.103 --> 00:17:19.103
某个主题领域，所以如果你正在写

1031
00:17:19.103 --> 00:17:20.103
一个特定的主题，比如编程

1033
00:17:20.103 --> 00:17:21.104
语言，你 就像好吧，我

1035
00:17:21.104 --> 00:17:22.104
想谈谈

1037
00:17:22.104 --> 00:17:24.104
你知道 emacs lisp 和 scheme 以及

1039
00:17:24.104 --> 00:17:26.104
一些你不必去

1041
00:17:26.104 --> 00:17:27.104
单独创建这些文件中的每一个

1043
00:17:27.104 --> 00:17:29.104
你实际上可以使用插入

1045
00:17:29.104 --> 00:17:29.104
命令

1047
00:17:29.104 --> 00:17:32.105
来加快该过程的过程

1049
00:17:32.105 --> 00:17:33.105
您正在编辑的当前文件

1051
00:17:33.105 --> 00:17:37.105
所以假设我想

1053
00:17:37.105 --> 00:17:38.105
在这里开始一个新行而不是

1055
00:17:38.105 --> 00:17:40.105
手动为方案语言创建一个

1057
00:17:40.105 --> 00:17:44.106
新节点

1059
00:17:44.106 --> 00:17:47.106
我使用控制 cni

1061
00:17:47.106 --> 00:17:50.106
在此处插入并输入方案我们正在输入

1063
00:17:50.106 --> 00:17:51.107
以一个尚不存在的节点的名称，

1065
00:17:52.107 --> 00:17:54.107
我按回车键，现在我们得到一个

1067
00:17:54.107 --> 00:17:55.107
用于创建该节点的捕获缓冲区，

1069
00:17:56.107 --> 00:17:57.107
我对此还没有什么可说的，

1071
00:17:57.107 --> 00:17:58.107
所以我只需按 ctrl c

1073
00:17:58.107 --> 00:17:59.107
ctrl c

1075
00:17:59.107 --> 00:18:02.108
然后 在我确认

1077
00:18:02.108 --> 00:18:03.108
捕获缓冲区

1079
00:18:03.108 --> 00:18:05.108
和该节点被创建后，

1081
00:18:05.108 --> 00:18:07.108
将立即插入到该节点的链接，这样

1083
00:18:07.108 --> 00:18:10.108
可以更快地开始创建与

1085
00:18:10.108 --> 00:18:14.109
当前节点相关的新节点，嗯，是的，

1087
00:18:14.109 --> 00:18:15.109
这就是您创建不相关节点的方式

1089
00:18:15.109 --> 00:18:17.109
存在，但我一直在使用它，

1091
00:18:17.109 --> 00:18:19.109
不幸的是，

1093
00:18:19.109 --> 00:18:21.109
在 uh orgrom v1 中有一种更快的方法，

1095
00:18:21.109 --> 00:18:23.110
我认为他们已经

1097
00:18:23.110 --> 00:18:24.110
在 v2 中删除了它，但希望他们稍后会把它带

1099
00:18:24.110 --> 00:18:25.110
回来，

1101
00:18:25.110 --> 00:18:27.110
它被称为 uh

1103
00:18:27.110 --> 00:18:28.110
org roam

1105
00:18:28.110 --> 00:18:30.110
uh find file immediately or something

1107
00:18:30.110 --> 00:18:31.111
that it was sort of this

1109
00:18:31.111 --> 00:18:32.111
immediately concept

1111
00:18:32.111 --> 00:18:34.111
that basically just created the new

1113
00:18:34.111 --> 00:18:35.111
file without even have even have to prompt you

1115
00:18:35.111 --> 00:18:37.111
and then insert the link directly

1117
00:18:37.111 --> 00:18:39.111
uh 也许他们会把它加回去

1119
00:18:39.111 --> 00:18:40.111
或者社区 将该

1121
00:18:40.111 --> 00:18:42.112
函数添加到一个单独的包中，或者我们将

1123
00:18:42.112 --> 00:18:53.113
看到它如何运行

1125
00:18:53.113 --> 00:18:55.113
完成双方括号

1127
00:18:55.113 --> 00:18:56.113
内的

1129
00:18:56.113 --> 00:18:58.113
节点名称，因此

1131
00:18:58.113 --> 00:19:01.114
链接语法在 org 模式下的工作方式通常

1133
00:19:01.114 --> 00:19:03.114
是双括号内有链接，

1135
00:19:03.114 --> 00:19:05.114
所以如果我要

1137
00:19:05.114 --> 00:19:07.114
在末尾按删除或退格键

1139
00:19:07.114 --> 00:19:08.114
这一行

1141
00:19:08.114 --> 00:19:10.114
你可以看到这个链接以

1143
00:19:10.114 --> 00:19:11.115
两个括号开头

1145
00:19:11.115 --> 00:19:13.115
，然后有关于

1147
00:19:13.115 --> 00:19:16.115
链接目标的信息，然后是

1149
00:19:16.115 --> 00:19:19.115
它里面的链接标题，所以如果你要手动

1151
00:19:19.115 --> 00:19:19.115
输入打开的方

1153
00:19:20.115 --> 00:19:22.116
括号关闭方括号

1155
00:19:22.116 --> 00:19:23.116
两次，这样你左边有两个括号，

1157
00:19:23.116 --> 00:19:25.116
右边有两个括号，

1159
00:19:25.116 --> 00:19:27.116
然后你可以使用 meta x 并

1161
00:19:27.116 --> 00:19:30.116
在点运行完成，

1163
00:19:30.116 --> 00:19:32.117
现在你将获得

1165
00:19:32.117 --> 00:19:34.117
你拥有的所有节点的完成列表，

1167
00:19:34.117 --> 00:19:35.117
如果你选择其中一个，就像让我们

1169
00:19:35.117 --> 00:19:37.117
说 emacs lisp 它把它变成

1171
00:19:38.117 --> 00:19:41.118
一个指向 emacs 列表节点的链接，

1173
00:19:41.118 --> 00:19:43.118
你会在这里看到它以一个

1175
00:19:43.118 --> 00:19:45.118
具有这种 rom 冒号语法的链接开始，

1177
00:19:45.118 --> 00:19:47.118
但是如果你保存缓冲区，

1179
00:19:47.118 --> 00:19:49.118
它将把它改回正常的

1181
00:19:49.118 --> 00:19:51.119
名称 节点所以你不会

1183
00:19:51.119 --> 00:19:54.119
在你的文件中到处看到那些漫游冒号所以

1185
00:19:54.119 --> 00:19:56.119
这可能看起来不是很方便

1187
00:19:56.119 --> 00:19:57.119
因为另一个键绑定

1189
00:19:57.119 --> 00:19:59.119
实际上比

1191
00:19:59.119 --> 00:20:02.120
在 i 中使用 ctrl c 这样做要快一点但是有一种不同的方法来

1193
00:20:02.120 --> 00:20:03.120
完成

1195
00:20:03.120 --> 00:20:05.120
缓冲区可能对

1197
00:20:05.120 --> 00:20:07.120
您来说更方便一点，那

1199
00:20:07.120 --> 00:20:09.120
就是打开此

1201
00:20:09.120 --> 00:20:10.120
功能以在

1203
00:20:10.120 --> 00:20:13.121
任何地方完成，这是 org

1205
00:20:13.121 --> 00:20:14.121
roam completion everywhere 变量

1207
00:20:14.121 --> 00:20:15.121
设置，

1209
00:20:15.121 --> 00:20:17.121
如果

1211
00:20:17.121 --> 00:20:19.121
您开始输入几个字符，则可以在缓冲区中的任何地方

1213
00:20:19.121 --> 00:20:19.121
然后

1215
00:20:19.121 --> 00:20:22.122
使用 completion at point 它将尝试

1217
00:20:22.122 --> 00:20:24.122
完成您输入的任何内容

1219
00:20:24.122 --> 00:20:27.122
作为节点名称，以便您可以

1221
00:20:27.122 --> 00:20:28.122
在当前缓冲区中插入指向该节点的链接

1223
00:20:28.122 --> 00:20:30.122
我不认为这允许您创建

1225
00:20:30.122 --> 00:20:32.123
它只允许的新节点 你选择

1227
00:20:32.123 --> 00:20:34.123
一个现有的节点，所以

1229
00:20:34.123 --> 00:20:35.123
我们要做的是采用这个

1231
00:20:35.123 --> 00:20:37.123
更新的配置有

1233
00:20:37.123 --> 00:20:38.123
两件事我们

1235
00:20:38.123 --> 00:20:40.123
在这里做了不同的事情，其中​​之一是我们

1237
00:20:40.123 --> 00:20:41.124
在自定义部分中我们将这个

1239
00:20:42.124 --> 00:20:44.124
orgroom completion 到处都设置为 true

1241
00:20:44.124 --> 00:20:46.124
我们 我们还在 org 模式映射中添加了一个额外的

1243
00:20:46.124 --> 00:20:47.124
绑定，

1245
00:20:48.124 --> 00:20:50.124
因此在每个 org 模式文件中，我们都添加了一个

1247
00:20:50.124 --> 00:20:52.125
新的键绑定

1249
00:20:52.125 --> 00:20:54.125
以完成点，我们

1251
00:20:54.125 --> 00:20:55.125
在 emacs 中为此使用传统的绑定，

1253
00:20:55.125 --> 00:20:57.125
即 control

1255
00:20:57.125 --> 00:21:00.125
alt i 或 control meta 我所以我要做的

1257
00:21:00.125 --> 00:21:01.125
是将

1259
00:21:01.125 --> 00:21:02.126
这个更新的配置复制并粘贴

1261
00:21:02.126 --> 00:21:05.126
回我们的 init.el

1263
00:21:05.126 --> 00:21:08.126
文件中，让我将其放入，然后我可以

1265
00:21:08.126 --> 00:21:10.126
删除我们之前添加的内容，

1267
00:21:10.126 --> 00:21:12.127
然后进入此处并按住 ctrl alt x

1269
00:21:12.127 --> 00:21:14.127
到 现在执行这个

1271
00:21:14.127 --> 00:21:16.127
我可以回到编程

1273
00:21:16.127 --> 00:21:17.127
语言我可以输入

1275
00:21:17.127 --> 00:21:20.127
em 然后控制 alt i 然后它将

1277
00:21:20.127 --> 00:21:21.128
自动完成它到

1279
00:21:21.128 --> 00:21:22.128
emacs lisp

1281
00:21:22.128 --> 00:21:24.128
因为这是唯一以

1283
00:21:24.128 --> 00:21:26.128
em 开头的完成

1285
00:21:26.128 --> 00:21:29.128
所以如果我们有其他以开头的项目

1287
00:21:29.128 --> 00:21:30.128
相同的字母，你

1289
00:21:30.128 --> 00:21:32.129
只输入相同的字母或前缀，

1291
00:21:32.129 --> 00:21:34.129
然后你会得到一个选择列表，

1293
00:21:34.129 --> 00:21:35.129
说明你实际想要插入哪个字母，

1295
00:21:35.129 --> 00:21:36.129
所以

1297
00:21:36.129 --> 00:21:38.129
呃，如果你正在写一些东西，它

1299
00:21:38.129 --> 00:21:40.129
可能会有用，比如说，

1301
00:21:40.129 --> 00:21:44.130
嗯，我喜欢这些语言 em

1303
00:21:44.130 --> 00:21:47.130
和 sc 然后基本上你

1305
00:21:47.130 --> 00:21:50.130
很快就得到了 um

1307
00:21:50.130 --> 00:21:51.130
有趣的是

1309
00:21:51.130 --> 00:21:53.131
额外的句号出现在那里你

1311
00:21:53.131 --> 00:21:54.131
很快得到

1313
00:21:54.131 --> 00:21:57.131
uh 你想要链接到文档中的节点

1315
00:21:58.131 --> 00:21:59.131
很快插入它而无需

1317
00:21:59.131 --> 00:22:01.131
使用其他键绑定所以 这可能会

1319
00:22:01.131 --> 00:22:01.132
快得多

1321
00:22:02.132 --> 00:22:04.132
你也可以将它绑定到选项卡但是

1323
00:22:04.132 --> 00:22:05.132
选项卡

1325
00:22:05.132 --> 00:22:07.132
在组织模式缓冲区中具有特殊含义并且

1327
00:22:07.132 --> 00:22:09.132
尝试将选项卡重新绑定到

1329
00:22:09.132 --> 00:22:11.133
其他东西并不是很好因为你会打破

1331
00:22:11.133 --> 00:22:13.133
标题的循环所以这就是我们

1333
00:22:13.133 --> 00:22:17.133
坚持的原因 在 orga 缓冲区中使用 ctrl alt i

1335
00:22:17.133 --> 00:22:20.133
没关系，所以 org v2 中有一个

1337
00:22:20.133 --> 00:22:22.134
以前不存在的新功能，或者

1339
00:22:22.134 --> 00:22:24.134
至少据我所知在 org v1 中，

1341
00:22:24.134 --> 00:22:28.134
你也可以将

1343
00:22:28.134 --> 00:22:31.134
orgrome 文件中的顶级标题转换为它的 自己的

1345
00:22:31.134 --> 00:22:31.135
节点是

1347
00:22:32.135 --> 00:22:36.135
一个独立的主题，

1349
00:22:36.135 --> 00:22:38.135
如果有一个主题真的

1351
00:22:38.135 --> 00:22:40.135
很小或微不足道以至于您

1353
00:22:40.135 --> 00:22:42.136
不想为其创建一个单独的文件，您可能只想这样做，

1355
00:22:42.136 --> 00:22:44.136
您实际上可以创建一个标题

1357
00:22:44.136 --> 00:22:45.136
在你的文件里面这样做，

1359
00:22:45.136 --> 00:22:49.136
所以如果要这样做，你需要

1361
00:22:49.136 --> 00:22:49.136
做的

1363
00:22:50.136 --> 00:22:53.137
是在 orgrome 节点缓冲区内创建一个顶级标题，

1365
00:22:53.137 --> 00:22:56.137
然后使用 org id git

1367
00:22:56.137 --> 00:22:57.137
create 命令

1369
00:22:57.137 --> 00:23:00.137
为该标题分配一个 id，一旦你这样做

1371
00:23:00.137 --> 00:23:00.137
然后

1373
00:23:00.137 --> 00:23:02.138
orgrim 会把它捡起来然后把

1375
00:23:02.138 --> 00:23:04.138
它变成它自己的节点

1377
00:23:04.138 --> 00:23:14.139
所以让我们进入 emax lisp 节点

1379
00:23:14.139 --> 00:23:15.139
一个

1381
00:23:15.139 --> 00:23:16.139
名为

1383
00:23:16.139 --> 00:23:19.139
uh resources 的标题让我们说就像你知道的

1385
00:23:19.139 --> 00:23:21.140
教程链接等然后我将

1387
00:23:22.140 --> 00:23:23.140
使用那个组织 id

1389
00:23:23.140 --> 00:23:26.140
git create 函数或命令

1391
00:23:26.140 --> 00:23:28.140
它所做的只是

1393
00:23:28.140 --> 00:23:30.140
为这个标题的这个节点创建一个 id 然后

1395
00:23:30.140 --> 00:23:31.140
分配它

1397
00:23:31.140 --> 00:23:34.141
和作为 一旦我保存这个文件，我就可以

1399
00:23:34.141 --> 00:23:37.141
在 f 中使用控制 c 现在我们看到资源是

1401
00:23:37.141 --> 00:23:38.141
这个列表的一部分

1403
00:23:38.141 --> 00:23:40.141
所以无论你命名那个节点

1405
00:23:40.141 --> 00:23:41.142
现在都会出现

1407
00:23:41.142 --> 00:23:45.142
在节点列表中

1409
00:23:45.142 --> 00:23:49.142
所以嗯如果你有会发生什么

1411
00:23:49.142 --> 00:23:51.142
多个文件中的相同顶级节点所以让我们

1413
00:23:51.142 --> 00:23:52.143
说对于我喜欢的每个

1415
00:23:52.143 --> 00:23:56.143
um 编程语言节点让

1417
00:23:56.143 --> 00:23:58.143
我们说对于 emacs 列表和

1419
00:23:58.143 --> 00:24:00.143
方案如果我有一个

1421
00:24:00.143 --> 00:24:00.143
我想要

1423
00:24:00.143 --> 00:24:02.144
变成的资源节点或我想要的资源标题

1425
00:24:02.144 --> 00:24:04.144
变成一个节点

1427
00:24:04.144 --> 00:24:05.144
如果我做得好会发生什么让我们尝试一下

1429
00:24:06.144 --> 00:24:08.144
我将进入

1431
00:24:08.144 --> 00:24:11.145
cnf 方案节点我将

1433
00:24:11.145 --> 00:24:15.145
创建一个资源标题

1435
00:24:15.145 --> 00:24:17.145
然后我将使用 org id git create 将

1437
00:24:17.145 --> 00:24:19.145
其变成一个节点

1439
00:24:19.145 --> 00:24:21.146
我会 使用 control c 和 f 现在我们看到

1441
00:24:21.146 --> 00:24:22.146
有两个

1443
00:24:22.146 --> 00:24:24.146
资源条目，它们实际上

1445
00:24:24.146 --> 00:24:27.146
对应于这两个文件中的标题

1447
00:24:27.146 --> 00:24:29.146
以组织这些是独立的节点，

1449
00:24:29.146 --> 00:24:30.146
即使它们具有相同的名称，

1451
00:24:30.146 --> 00:24:32.147
因为实际上 uni 唯一性是

1453
00:24:32.147 --> 00:24:34.147
由 id 驱动的 节点而不是

1455
00:24:34.147 --> 00:24:36.147
名称本身，

1457
00:24:36.147 --> 00:24:38.147
所以在这种情况下你该怎么办你不能将这

1459
00:24:38.147 --> 00:24:39.147
两个分开你将不得不

1461
00:24:39.147 --> 00:24:39.147
去

1463
00:24:39.147 --> 00:24:41.147
你将不得不导航到这两个

1465
00:24:41.147 --> 00:24:42.148
以找出你

1467
00:24:42.148 --> 00:24:43.148
实际想要

1469
00:24:43.148 --> 00:24:45.148
找到的那个，那是 对于

1471
00:24:45.148 --> 00:24:57.149
我们在这里尝试做的事情来说并不是很有效

1473
00:24:57.149 --> 00:24:59.149
通过使用 org

1475
00:24:59.149 --> 00:25:02.150
roam alias add 命令，无论它是文件节点还是标题节点，只要

1477
00:25:02.150 --> 00:25:04.150
您的光标位于

1479
00:25:04.150 --> 00:25:05.150
已知节点内，例如在本例中的

1481
00:25:05.150 --> 00:25:08.150
资源节点，您就可以使用

1483
00:25:08.150 --> 00:25:12.151
um org roam alias add

1485
00:25:12.151 --> 00:25:15.151
uh 命令添加一个 别名所以在这种

1487
00:25:15.151 --> 00:25:16.151
情况下我想调用这个

1489
00:25:16.151 --> 00:25:19.151
方案资源所以一旦我这样做

1491
00:25:19.151 --> 00:25:21.151
我可以保存那个文件

1493
00:25:21.151 --> 00:25:22.152
并且这个文件的标题不会

1495
00:25:22.152 --> 00:25:24.152
改变但是如果你去看看

1497
00:25:24.152 --> 00:25:25.152
顶部的属性部分

1499
00:25:25.152 --> 00:25:27.152
它应该添加哦 抱歉，没有

1501
00:25:27.152 --> 00:25:28.152
错误的地方，如果您查看

1503
00:25:28.152 --> 00:25:30.152
此节点的属性部分，您可以

1505
00:25:30.152 --> 00:25:30.152
看到

1507
00:25:30.152 --> 00:25:32.153
我们有一个名为 roam

1509
00:25:32.153 --> 00:25:34.153
aliases 的新项目，其中包含方案资源，

1511
00:25:34.153 --> 00:25:37.153
如果我们使用 control 和 c 抱歉，

1513
00:25:37.153 --> 00:25:38.153
control c

1515
00:25:38.153 --> 00:25:41.153
和 f 我们现在可以看到那些 两个

1517
00:25:41.153 --> 00:25:43.154
资源条目仍然

1519
00:25:43.154 --> 00:25:46.154
存在，但我们有一个新的方案

1521
00:25:46.154 --> 00:25:49.154
资源条目，因此您可以

1523
00:25:49.154 --> 00:25:52.155
使用正确的资源条目

1525
00:25:52.155 --> 00:25:53.155
或使用

1527
00:25:53.155 --> 00:25:55.155
方案资源作为

1529
00:25:55.155 --> 00:25:57.155
同一注释的不同名称来到达同一节点，

1531
00:25:57.155 --> 00:25:59.155
并且您不限于 只有一个别名

1533
00:25:59.155 --> 00:26:00.155
你也可以添加另一个

1535
00:26:00.155 --> 00:26:03.156
别名所以假设我将为方案链接添加

1537
00:26:03.156 --> 00:26:04.156
另一个别名

1539
00:26:04.156 --> 00:26:07.156
所以现在你看到我们有两个

1541
00:26:07.156 --> 00:26:09.156
rom 别名如果我使用 ctrl c

1543
00:26:09.156 --> 00:26:11.156
和 f 我们有方案链接方案

1545
00:26:11.156 --> 00:26:12.157
资源然后相同的

1547
00:26:12.157 --> 00:26:15.157
两个 资源条目和以前一样所以呃

1549
00:26:15.157 --> 00:26:16.157
这只是

1551
00:26:16.157 --> 00:26:17.157
如果你想摆脱

1553
00:26:17.157 --> 00:26:19.157
麻烦如果

1555
00:26:19.157 --> 00:26:21.158
你个人组织事情的方式有一些问题

1557
00:26:21.158 --> 00:26:24.158
我觉得

1559
00:26:24.158 --> 00:26:26.158
你可能永远不应该让自己

1561
00:26:26.158 --> 00:26:28.158
陷入这个问题就像如果

1563
00:26:28.158 --> 00:26:29.158
你是，如果你正在

1565
00:26:29.158 --> 00:26:31.158
正确地组织事情，希望你永远不必

1567
00:26:31.158 --> 00:26:32.159
这样做，

1569
00:26:32.159 --> 00:26:34.159
嗯，如果你有一堆

1571
00:26:34.159 --> 00:26:35.159
同名的标题，你正在变成

1573
00:26:35.159 --> 00:26:37.159
节点，也许你应该考虑

1575
00:26:38.159 --> 00:26:40.159
为那些而不是创建单独的主题条目，

1577
00:26:40.159 --> 00:26:41.159
嗯，

1579
00:26:41.159 --> 00:26:44.160
因为 orgrome 甚至

1581
00:26:44.160 --> 00:26:45.160
zettle case 等的想法是你

1583
00:26:45.160 --> 00:26:47.160
试图创建更小的主题节点，

1585
00:26:47.160 --> 00:26:48.160
而不是拥有一个

1587
00:26:48.160 --> 00:26:50.160
包含很多标题的巨大文档，你也

1589
00:26:50.160 --> 00:26:50.160
将它们

1591
00:26:50.160 --> 00:26:53.161
变成节点，所以不确定什么是

1593
00:26:53.161 --> 00:26:56.161
最有效的用例 用于使用

1595
00:26:56.161 --> 00:26:58.161
标题节点，尤其是当您

1597
00:26:58.161 --> 00:27:00.161
遇到此类问题时，

1599
00:27:00.161 --> 00:27:02.162
但是如果您找到了自己喜欢的使用方法，请

1601
00:27:02.162 --> 00:27:03.162
务必在评论中告诉我，

1603
00:27:03.162 --> 00:27:04.162
因为我

1605
00:27:04.162 --> 00:27:07.162
很想知道，

1607
00:27:07.162 --> 00:27:10.162
所以一旦您开始创建一个

1609
00:27:10.162 --> 00:27:12.163
许多链接在一起的节点

1611
00:27:12.163 --> 00:27:13.163
打开

1613
00:27:14.163 --> 00:27:15.163
反向链接缓冲区以查看

1615
00:27:15.163 --> 00:27:17.163
哪些注释链接到

1617
00:27:17.163 --> 00:27:19.163
您当前正在查看的节点可能非常有帮助，

1619
00:27:19.163 --> 00:27:21.163
这实际上是

1621
00:27:21.163 --> 00:27:22.164
orgrome 的最大卖点之一，

1623
00:27:22.164 --> 00:27:24.164
现在您可以使用这种功能 拥有

1625
00:27:24.164 --> 00:27:26.164
这个节点网络，您需要能够

1627
00:27:26.164 --> 00:27:27.164
看到它们之间的关系，才能

1629
00:27:27.164 --> 00:27:29.164
真正从中获得更多价值

1631
00:27:30.164 --> 00:27:31.164
人们

1633
00:27:31.164 --> 00:27:32.165
在谈论建立这种

1635
00:27:32.165 --> 00:27:34.165
知识库时会说的一件事是，

1637
00:27:34.165 --> 00:27:35.165
如果您有很多笔记 关于某个

1639
00:27:35.165 --> 00:27:37.165
特定主题，并且

1641
00:27:37.165 --> 00:27:41.165
您与其他笔记中的该主题有很多联系，

1643
00:27:41.165 --> 00:27:43.166
如果您查看反向链接，您可能会

1645
00:27:43.166 --> 00:27:45.166
开始看到

1647
00:27:45.166 --> 00:27:46.166
您之前没有真正考虑过的主题之间的联系，

1649
00:27:46.166 --> 00:27:48.166
这可能会给您带来新的

1651
00:27:48.166 --> 00:27:49.166
想法，因此

1653
00:27:50.166 --> 00:27:52.167
拥有您的反向链接 在

1655
00:27:52.167 --> 00:27:53.167
您查看组织

1657
00:27:53.167 --> 00:27:55.167
漫游文件时打开缓冲区实际上

1659
00:27:55.167 --> 00:27:56.167
对您的思考和

1661
00:27:56.167 --> 00:27:58.167
写作过程非常有帮助，

1663
00:27:58.167 --> 00:28:01.167
所以让我们打开 emax 列表节点，

1665
00:28:01.167 --> 00:28:02.168
然后按 ctrl

1667
00:28:02.168 --> 00:28:05.168
c nl 绑定以

1669
00:28:05.168 --> 00:28:08.168
使用 orgrome 显示缓冲区

1671
00:28:08.168 --> 00:28:09.168
缓冲区切换命令

1673
00:28:10.168 --> 00:28:12.169
所以让我们转到 emax lisp 让我

1675
00:28:12.169 --> 00:28:14.169
只对那个 emx lisp 使用 control cnf

1677
00:28:14.169 --> 00:28:16.169
然后我将使用

1679
00:28:16.169 --> 00:28:18.169
control cnl

1681
00:28:18.169 --> 00:28:20.169
然后弹出下面的另一个窗口

1683
00:28:20.169 --> 00:28:22.170
带有一个

1685
00:28:22.170 --> 00:28:25.170
缓冲区基本上在这里

1687
00:28:25.170 --> 00:28:27.170
我们两次 提到的 emacs 列表我们

1689
00:28:27.170 --> 00:28:29.170
目前在此处的 emacs 列表文件中

1691
00:28:29.170 --> 00:28:33.171
和下面的反向链接缓冲区中，

1693
00:28:33.171 --> 00:28:35.171
只要我们提到 emacs lisp 或

1695
00:28:35.171 --> 00:28:37.171
从另一种模式链接到 emacs 列表，

1697
00:28:37.171 --> 00:28:39.171
我们就会在这里有一个条目，所以自从

1699
00:28:39.171 --> 00:28:40.171
我们提到 emacs list

1701
00:28:40.171 --> 00:28:42.172
twice in programming languages 它

1703
00:28:42.172 --> 00:28:44.172
实际上在

1705
00:28:44.172 --> 00:28:45.172
此处的编程语言节点中显示了两次，所以

1707
00:28:45.172 --> 00:28:47.172
我们看到的是编程

1709
00:28:47.172 --> 00:28:48.172
语言节点

1711
00:28:48.172 --> 00:28:56.173
提到了 emacs lisp，并且基本上摘录了

1713
00:28:56.173 --> 00:28:59.173
提到 emacs list 的编程语言中的文本 所以你有点了解

1715
00:28:59.173 --> 00:29:01.173
这两个节点之间的引用的上下文，嗯，

1717
00:29:01.173 --> 00:29:04.174
这两个节点所以

1719
00:29:04.174 --> 00:29:06.174
嗯，如果你切换到另一个节点，

1721
00:29:06.174 --> 00:29:07.174
你实际上会得到

1723
00:29:07.174 --> 00:29:10.174
更新所以现在我们出于某种原因在 emacs lisp

1725
00:29:10.174 --> 00:29:11.174
节点中

1727
00:29:11.174 --> 00:29:13.175
它 离开很有趣让

1729
00:29:13.175 --> 00:29:14.175
我们很快关闭它

1731
00:29:14.175 --> 00:29:16.175
并重新打开控制 c 和

1733
00:29:16.175 --> 00:29:19.175
l 哇这很有趣，

1735
00:29:19.175 --> 00:29:20.175
实际上已经清除了让我们切换到

1737
00:29:20.175 --> 00:29:22.176
另一个节点，看看接下来会发生什么

1739
00:29:22.176 --> 00:29:23.176
ctrl c

1741
00:29:23.176 --> 00:29:25.176
和 f 我们将切换到 scheme

1743
00:29:25.176 --> 00:29:26.176
好的，所以现在 它实际上

1745
00:29:26.176 --> 00:29:27.176
确实为 scheme 正确更新了

1747
00:29:27.176 --> 00:29:29.176
我们看到 scheme 的链接

1749
00:29:29.176 --> 00:29:31.176
在这里让我们跳回到

1751
00:29:31.176 --> 00:29:34.177
uh emacs 列表，现在 emacs 列表也是

1753
00:29:34.177 --> 00:29:37.177
um uh 再次选择并且我们得到了它的

1755
00:29:37.177 --> 00:29:38.177
反向链接所以任何时候你改变

1757
00:29:38.177 --> 00:29:40.177
到另一个节点这个缓冲区 将更新，

1759
00:29:40.177 --> 00:29:42.178
因此除了我们刚刚在那里看到的事实之外，您不必继续关闭和

1761
00:29:42.178 --> 00:29:45.178
重新打开此缓冲区

1763
00:29:45.178 --> 00:29:46.178
我不知道为什么会发生这种情况，但

1765
00:29:46.178 --> 00:29:48.178
如果我们想说如果我们要

1767
00:29:48.178 --> 00:29:49.178
使用编程语言节点

1769
00:29:49.178 --> 00:29:51.178
控制 c 和 f 选择编程

1771
00:29:51.178 --> 00:29:53.179
语言，现在我们看到

1773
00:29:53.179 --> 00:29:54.179
编程语言

1775
00:29:54.179 --> 00:29:55.179
在这里，但它是空的，因为

1777
00:29:55.179 --> 00:29:57.179
没有其他节点引用

1779
00:29:57.179 --> 00:29:58.179
编程语言，

1781
00:29:58.179 --> 00:30:01.179
但是假设我们在 f 中创建一个控件 c

1783
00:30:01.179 --> 00:30:03.180
我将创建一个系统工匠

1785
00:30:03.180 --> 00:30:05.180
节点，在

1787
00:30:05.180 --> 00:30:08.180
这里我 我要说的是，我们

1789
00:30:08.180 --> 00:30:12.181
有时会制作有关控制的视频，

1791
00:30:12.181 --> 00:30:14.181
我们只说专业编程

1793
00:30:14.181 --> 00:30:16.181
语言，如

1795
00:30:16.181 --> 00:30:19.181
em emacs lisp 和 sc

1797
00:30:19.181 --> 00:30:22.182
方案，因为我们有多个 sc

1799
00:30:22.182 --> 00:30:24.182
条目，所以这个完成让我可以

1801
00:30:24.182 --> 00:30:26.182
选择我想要

1803
00:30:26.182 --> 00:30:27.182
按下的那个 方案在这里

1805
00:30:27.182 --> 00:30:29.182
然后我将保存它并点击

1807
00:30:29.182 --> 00:30:30.182
ctrl c ctrl c

1809
00:30:30.182 --> 00:30:32.183
现在我们有一个系统

1811
00:30:32.183 --> 00:30:33.183
工匠的条目链接这三个其他

1813
00:30:33.183 --> 00:30:34.183
节点

1815
00:30:34.183 --> 00:30:36.183
现在如果我去编程

1817
00:30:36.183 --> 00:30:38.183
语言节点

1819
00:30:38.183 --> 00:30:39.183
我们可以看到我们有一个链接

1821
00:30:39.183 --> 00:30:41.183
现在来自 system crafters，如果我们转到

1823
00:30:41.183 --> 00:30:43.184
emacs lisp 节点，

1825
00:30:43.184 --> 00:30:46.184
那么我们可以看到有趣的是，这

1827
00:30:46.184 --> 00:30:48.184
有时不会填充，但让我

1829
00:30:48.184 --> 00:30:50.184
使用 ctrl c 足以到达那里，

1831
00:30:50.184 --> 00:30:51.184
所以现在我们可以看到 system

1833
00:30:51.184 --> 00:30:52.185
crafters 链接呃

1835
00:30:52.185 --> 00:30:54.185
是 此处也引用了

1837
00:30:54.185 --> 00:30:56.185
emacs lisp 节点的反向链接，

1839
00:30:56.185 --> 00:30:59.185
这样就可以向您展示，

1841
00:30:59.185 --> 00:31:01.186
当您创建新节点并

1843
00:31:02.186 --> 00:31:02.186
更新它们

1845
00:31:02.186 --> 00:31:05.186
进行更改时，数据库得到

1847
00:31:05.186 --> 00:31:07.186
更新，反向链接缓冲区也将

1849
00:31:07.186 --> 00:31:09.186
被刷新并向您展示

1851
00:31:09.186 --> 00:31:10.186
最新信息

1853
00:31:10.186 --> 00:31:12.187
这里和那里可能存在一些问题，

1855
00:31:12.187 --> 00:31:13.187
嗯，

1857
00:31:13.187 --> 00:31:15.187
它的工作可靠性如何，或者它可能只是

1859
00:31:15.187 --> 00:31:17.187
我的配置不确定

1861
00:31:17.187 --> 00:31:20.187
所以嗯，如果你有这个问题，请在评论中告诉我，

1863
00:31:20.187 --> 00:31:22.188
也许可以在 orgrome 上提出问题

1865
00:31:22.188 --> 00:31:23.188
嗯

1867
00:31:23.188 --> 00:31:25.188
github 存储库，如果你还有其他

1869
00:31:25.188 --> 00:31:26.188
问题，

1871
00:31:26.188 --> 00:31:29.188
所以我想我认为就是这样，

1873
00:31:29.188 --> 00:31:32.189
所以我们已经在这个视频中充分介绍了 orgrome，

1875
00:31:32.189 --> 00:31:33.189
这样你就可以开始以

1877
00:31:33.189 --> 00:31:35.189
新的方式做笔记，我认为

1879
00:31:36.189 --> 00:31:37.189
开始建立起来非常令人满意 你的

1881
00:31:37.189 --> 00:31:39.189
个人知识库使用

1883
00:31:39.189 --> 00:31:39.189
orgrom

1885
00:31:39.189 --> 00:31:42.190
提供的工具，在我开始真正

1887
00:31:42.190 --> 00:31:43.190
理解 orgrom 并开始

1889
00:31:43.190 --> 00:31:45.190
构建我自己的

1891
00:31:45.190 --> 00:31:48.190
节点集之后，我确实开始

1893
00:31:48.190 --> 00:31:49.190
从中获得更多价值，因为我

1895
00:31:49.190 --> 00:31:51.190
不必考虑我在哪里 放置

1897
00:31:51.190 --> 00:31:51.191
信息是

1899
00:31:51.191 --> 00:31:53.191
因为我刚刚创建了更小的节点来

1901
00:31:54.191 --> 00:31:55.191
保存所有这些东西

1903
00:31:55.191 --> 00:31:57.191
，它实际上鼓励我写一些

1905
00:31:57.191 --> 00:31:58.191
我

1907
00:31:58.191 --> 00:31:59.191
以前不会写的

1909
00:32:00.191 --> 00:32:01.191
关于各种不同主题的笔记，这

1911
00:32:01.191 --> 00:32:05.192
对于存储这些东西的资源链接也非常有帮助

1913
00:32:05.192 --> 00:32:07.192
我经常这样做，

1915
00:32:07.192 --> 00:32:09.192
所以在这个关于 orgrome 的系列的未来视频中，

1917
00:32:09.192 --> 00:32:11.192
我们将涵盖

1919
00:32:11.192 --> 00:32:13.193
更多主题，例如使用捕获模板

1921
00:32:13.193 --> 00:32:15.193
来创建 orgrome 节点，所以我们

1923
00:32:15.193 --> 00:32:16.193
有这个默认模板，它并没有

1925
00:32:16.193 --> 00:32:17.193
做太多

1927
00:32:17.193 --> 00:32:19.193
但也许我们有

1929
00:32:19.193 --> 00:32:21.193
我们需要创建的其他类型的节点，它们有更多的

1931
00:32:21.193 --> 00:32:22.194
模板来获取

1933
00:32:22.194 --> 00:32:24.194
您想要填写的信息，

1935
00:32:24.194 --> 00:32:26.194
您也可以使用 orgrom 进行日常

1937
00:32:26.194 --> 00:32:28.194
日记和日志记录，并使用一个

1939
00:32:28.194 --> 00:32:29.194
名为 dailies 的功能

1941
00:32:29.194 --> 00:32:31.194
，我实际上经常使用它，

1943
00:32:31.194 --> 00:32:33.195
然后我们可以 也做一些工作来

1945
00:32:33.195 --> 00:32:35.195
使用你的 orgrom 文件填充 org 议程

1947
00:32:35.195 --> 00:32:36.195
，

1949
00:32:36.195 --> 00:32:38.195
实际上

1951
00:32:38.195 --> 00:32:40.195
比你使用普通 org 文件更有效的方式

1953
00:32:40.195 --> 00:32:41.196
所以请注意这一点，

1955
00:32:42.196 --> 00:32:43.196
我们还将讨论

1957
00:32:43.196 --> 00:32:46.196
显示为 orgrom 的任何其他内容 v2 的发展是

1959
00:32:46.196 --> 00:32:47.196
因为 orgrom v2 实际上是

1961
00:32:47.196 --> 00:32:49.196
一个平台，

1963
00:32:49.196 --> 00:32:52.197
其他软件包将在该平台上开发，所以

1965
00:32:52.197 --> 00:32:54.197
我们将随着时间的推移讨论这个问题，因为

1967
00:32:54.197 --> 00:32:55.197
我们会看到出现的新事物

1969
00:32:55.197 --> 00:32:56.197
，如果您发现

1971
00:32:56.197 --> 00:32:57.197
我们没有发现的关于 orgrom 的任何有趣的事情

1973
00:32:57.197 --> 00:32:59.197
绝对涵盖在这里，请在评论中留言

1975
00:32:59.197 --> 00:33:00.197
并让我知道，

1977
00:33:00.197 --> 00:33:00.197
因为

1979
00:33:00.197 --> 00:33:02.198
你知道我一直在关注事物，但我

1981
00:33:02.198 --> 00:33:04.198
找不到所有东西，

1983
00:33:04.198 --> 00:33:06.198
所以与此同时，请查看 orgrome

1985
00:33:06.198 --> 00:33:08.198
手册以获取有关

1987
00:33:08.198 --> 00:33:10.198
orgrom 提供的功能的更多信息 在我们播放下一个视频之前，您

1989
00:33:10.198 --> 00:33:13.199
可能会在那里学到一些很酷的新东西，

1991
00:33:14.199 --> 00:33:15.199
并且确保订阅只是为了

1993
00:33:15.199 --> 00:33:17.199
确保每当

1995
00:33:17.199 --> 00:33:18.199
我们制作这些新视频时您都会收到通知如果

1997
00:33:18.199 --> 00:33:20.199
我不是 youtuber 除非我说

1999
00:33:20.199 --> 00:33:21.199
订阅视频末尾的频道，

2001
00:33:21.199 --> 00:33:21.199
很

2003
00:33:21.199 --> 00:33:23.200
抱歉，在我们走之前，

2005
00:33:23.200 --> 00:33:24.200
我想说谢谢，让我们

2007
00:33:24.200 --> 00:33:28.200
看看我的赞助商，嗯，这些

2009
00:33:28.200 --> 00:33:29.200
人已经

2011
00:33:29.200 --> 00:33:30.200
决定赞助我正在

2013
00:33:30.200 --> 00:33:32.201
做的制作视频的工作 canoe

2015
00:33:32.201 --> 00:33:35.201
new geeks can you emacs etc

2017
00:33:35.201 --> 00:33:36.201
如果你有兴趣支持这个

2019
00:33:36.201 --> 00:33:38.201
频道，我非常感谢他们的支持，请查看下面

2021
00:33:38.201 --> 00:33:40.201
描述中的链接我在 github

2023
00:33:40.201 --> 00:33:41.201
赞助商和 patreon 上

2025
00:33:41.201 --> 00:33:43.202
还有一个链接 一次性使用 paypal

2027
00:33:43.202 --> 00:33:44.202
提示，如果您对以

2029
00:33:44.202 --> 00:33:46.202
这种方式支持不感兴趣，

2031
00:33:46.202 --> 00:33:47.202
只需点击此视频，

2033
00:33:48.202 --> 00:33:49.202
然后与

2035
00:33:49.202 --> 00:33:50.202
您可能认识的人或可能喜欢它的人分享，

2037
00:33:50.202 --> 00:33:53.203
以便我们可以在频道上吸引更多人

2039
00:33:54.203 --> 00:33:56.203
与我们谈论很酷的东西，尤其是在我们周五的直播中，

2041
00:33:56.203 --> 00:33:58.203
如果您想与这个社区中很酷的人交谈，请

2043
00:33:58.203 --> 00:34:00.203
查看呃，我想我

2045
00:34:00.203 --> 00:34:01.203
在下面的描述中有一个指向

2047
00:34:01.203 --> 00:34:03.204
我们的不和谐服务器和 irc 的链接，我们都在那里

2049
00:34:03.204 --> 00:34:05.204
是时候谈论很酷的东西了，所以

2051
00:34:05.204 --> 00:34:07.204
一定要加入我们，好吧，

2053
00:34:07.204 --> 00:34:08.204
非常感谢你观看

2055
00:34:08.204 --> 00:34:10.204
这个视频，希望

2057
00:34:10.204 --> 00:34:12.205
你喜欢它，如果你让我知道，

2059
00:34:12.205 --> 00:34:14.205
那么直到下一次，非常感谢，

2061
00:34:14.205 --> 00:34:14.205
我们会再见的
